===== Running the program =====
To run this program:

- All supplied classes should be located in the src file.
- An events.txt file must exist in the root folder and be correctly formatted (see below) and contain no errors.
- It is assumed that this file will be generated by input from a GUI, which will not generate human error.
- A requests.txt file must exist in the root folder for tracking low inventory items.
The module should be compiled, and the Simulator.java class run.
The program should read from events.txt and print to screen the events that affect tables directly (order, delivered etc.).


===== Handling MenuItems =====
menu.Menu Items for this restaurant.Restaurant are created in class menu.BurgerMenu. All items in the menu.BurgerMenu must include an item name, price, and a list of ingredients.
menu.Menu Items do not specify what ingredients are allowed to be added to them- it is assumed that servers will only add reasonable modifications.
When menu items are ordered through events.txt new instances of menu.MenuItem are created, and later replaced with the pre-existing items in menu.BurgerMenu.
If modifications are requested for a menu.MenuItem, menu.Ingredient items are generated similarly.
When modifications are ordered only the first five menu.Ingredient additions/subtractions will be accepted.
Requested subtractions for an item will not be applied if they do not exist in their menu.MenuItem's ingredients.
All ingredient modifications will affect the final price of an item.


===== events in events.txt =====
All events in events.txt must begin with an event type, and the table which it affects. Ie. type | table #

Placing an order:
restaurant.Order events signal that a table has placed an order.
Example:    order | table 1 | 1 Hamburger / +lettuce -bacon, 1 Fries

order events include the items that are being ordered to a table, the item information should be separated from the table # with a "| ".
menu.Menu items are preceded by a number, indicating how many of an item were ordered.
If there is more than one item being ordered, items (and their respective modifications, if any) should be separated by a comma.
If an item was ordered with an ingredient modification they are shown after the item, separated by a "/ ".
menu.Ingredient modifications should be in the form +/-ingredient, where +/- indicated whether or not the ingredient should be added to, or removed form the item.

Receiving an order:
Received events signal that the chef has received an order.
Example:    received | table 1

received events indicate that an order has been received by the kitchen, and triggers the "cook has seen" event, which is followed by the "ready for pickup!" event in the system.

Delivering an order:
Delivered events signal that an order has been delivered to the table.
Example:    delivered | table 1

delivered events indicate that a server has reported delivering an order to this table.

Returning an order:
ServerReturned events signal that a table has returned an item from their order.
Example:    serverReturned | table 1 | 1 Coke, 1 Hamburger | drink isn't fizzy, overcooked

serverReturned events indicate that there was an error/problem with an order, or an order item. They should include the item being returned and a return message (from server input), separated by "| ".
If several different items are being returned, both items will show a corresponding message, after separator, and be separated by a comma.

Requesting a check:
Check please! events signal that a table has requested their check, and frees the table for new orders.
Example:    check please! | table 1

check please! events indicate that a table has finished ordering items and triggers that table's bill generation.

Receiving a shipment:
ReceivedShipment events signal that an order of ingredients has been received.
Example:    received shipment | ?????

received shipment events indicate that some inventory item(s) fell below their threshold, and were re-ordered by the manager.
Received ingredient amounts are added to the restaurant.Restaurant's restaurant.Inventory counts.